//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL_EASYTREAD = new InjectionToken<string>('API_BASE_URL_EASYTREAD');

export interface ICrossingClient {
    getAllCrossingVehicles(): Observable<CrossingResponse[]>;
    getAllBadAndMarginalVehicles(): Observable<CrossingResponse[]>;
    createCrossing(crossingRequest: CrossingRequest): Observable<FileResponse | null>;
    showLatestCrossing(): Observable<CrossingResponse>;
    showANumberOfLatestCrossings(count: number | undefined): Observable<CrossingResponse[]>;
    getCrossingByLicensePlate(licensePlate: string | null | undefined): Observable<CrossingResponse[]>;
}

@Injectable()
export class CrossingClient implements ICrossingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL_EASYTREAD) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7065";
    }

    getAllCrossingVehicles(): Observable<CrossingResponse[]> {
        let url_ = this.baseUrl + "/api/Crossing/GetAllCrossingVehicles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCrossingVehicles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCrossingVehicles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CrossingResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CrossingResponse[]>;
        }));
    }

    protected processGetAllCrossingVehicles(response: HttpResponseBase): Observable<CrossingResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CrossingResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllBadAndMarginalVehicles(): Observable<CrossingResponse[]> {
        let url_ = this.baseUrl + "/api/Crossing/GetAllBadAndMarginalVehicles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllBadAndMarginalVehicles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllBadAndMarginalVehicles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CrossingResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CrossingResponse[]>;
        }));
    }

    protected processGetAllBadAndMarginalVehicles(response: HttpResponseBase): Observable<CrossingResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CrossingResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createCrossing(crossingRequest: CrossingRequest): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Crossing/CreateCrossing";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(crossingRequest);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCrossing(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCrossing(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processCreateCrossing(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    showLatestCrossing(): Observable<CrossingResponse> {
        let url_ = this.baseUrl + "/api/Crossing/ShowLatestCrossing";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processShowLatestCrossing(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processShowLatestCrossing(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CrossingResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CrossingResponse>;
        }));
    }

    protected processShowLatestCrossing(response: HttpResponseBase): Observable<CrossingResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrossingResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    showANumberOfLatestCrossings(count: number | undefined): Observable<CrossingResponse[]> {
        let url_ = this.baseUrl + "/api/Crossing/ShowANumberOfLatestCrossings?";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processShowANumberOfLatestCrossings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processShowANumberOfLatestCrossings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CrossingResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CrossingResponse[]>;
        }));
    }

    protected processShowANumberOfLatestCrossings(response: HttpResponseBase): Observable<CrossingResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CrossingResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getCrossingByLicensePlate(licensePlate: string | null | undefined): Observable<CrossingResponse[]> {
        let url_ = this.baseUrl + "/api/Crossing/GetCrossingByLicensePlate?";
        if (licensePlate !== undefined && licensePlate !== null)
            url_ += "licensePlate=" + encodeURIComponent("" + licensePlate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCrossingByLicensePlate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCrossingByLicensePlate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CrossingResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CrossingResponse[]>;
        }));
    }

    protected processGetCrossingByLicensePlate(response: HttpResponseBase): Observable<CrossingResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CrossingResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CrossingResponse implements ICrossingResponse {
    dealerNumber!: string;
    createdTime!: Date;
    valid!: boolean;
    vehicleRating!: string;
    reportLink!: string;
    crossingDirection!: string;
    licensePlate!: LicensePlateResponse;
    tires!: TireResponse[];

    constructor(data?: ICrossingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.licensePlate = new LicensePlateResponse();
            this.tires = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dealerNumber = _data["dealerNumber"];
            this.createdTime = _data["createdTime"] ? new Date(_data["createdTime"].toString()) : <any>undefined;
            this.valid = _data["valid"];
            this.vehicleRating = _data["vehicleRating"];
            this.reportLink = _data["reportLink"];
            this.crossingDirection = _data["crossingDirection"];
            this.licensePlate = _data["licensePlate"] ? LicensePlateResponse.fromJS(_data["licensePlate"]) : new LicensePlateResponse();
            if (Array.isArray(_data["tires"])) {
                this.tires = [] as any;
                for (let item of _data["tires"])
                    this.tires!.push(TireResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CrossingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CrossingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dealerNumber"] = this.dealerNumber;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["valid"] = this.valid;
        data["vehicleRating"] = this.vehicleRating;
        data["reportLink"] = this.reportLink;
        data["crossingDirection"] = this.crossingDirection;
        data["licensePlate"] = this.licensePlate ? this.licensePlate.toJSON() : <any>undefined;
        if (Array.isArray(this.tires)) {
            data["tires"] = [];
            for (let item of this.tires)
                data["tires"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICrossingResponse {
    dealerNumber: string;
    createdTime: Date;
    valid: boolean;
    vehicleRating: string;
    reportLink: string;
    crossingDirection: string;
    licensePlate: LicensePlateResponse;
    tires: TireResponse[];
}

export class LicensePlateResponse implements ILicensePlateResponse {
    plate!: string;
    plateConfidence!: number;
    country!: string;
    countryConfidence!: number;

    constructor(data?: ILicensePlateResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.plate = _data["plate"];
            this.plateConfidence = _data["plateConfidence"];
            this.country = _data["country"];
            this.countryConfidence = _data["countryConfidence"];
        }
    }

    static fromJS(data: any): LicensePlateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LicensePlateResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["plate"] = this.plate;
        data["plateConfidence"] = this.plateConfidence;
        data["country"] = this.country;
        data["countryConfidence"] = this.countryConfidence;
        return data;
    }
}

export interface ILicensePlateResponse {
    plate: string;
    plateConfidence: number;
    country: string;
    countryConfidence: number;
}

export class TireResponse implements ITireResponse {
    valid!: boolean;
    regionResponse!: RegionResponse[];
    propertySetResponse!: PropertySetResponse;

    constructor(data?: ITireResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.regionResponse = [];
            this.propertySetResponse = new PropertySetResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.valid = _data["valid"];
            if (Array.isArray(_data["regionResponse"])) {
                this.regionResponse = [] as any;
                for (let item of _data["regionResponse"])
                    this.regionResponse!.push(RegionResponse.fromJS(item));
            }
            this.propertySetResponse = _data["propertySetResponse"] ? PropertySetResponse.fromJS(_data["propertySetResponse"]) : new PropertySetResponse();
        }
    }

    static fromJS(data: any): TireResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TireResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["valid"] = this.valid;
        if (Array.isArray(this.regionResponse)) {
            data["regionResponse"] = [];
            for (let item of this.regionResponse)
                data["regionResponse"].push(item.toJSON());
        }
        data["propertySetResponse"] = this.propertySetResponse ? this.propertySetResponse.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITireResponse {
    valid: boolean;
    regionResponse: RegionResponse[];
    propertySetResponse: PropertySetResponse;
}

export class RegionResponse implements IRegionResponse {
    regionPosition!: RegionPositionEnum;
    value!: number;
    vehicleRating!: string;

    constructor(data?: IRegionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionPosition = _data["regionPosition"];
            this.value = _data["value"];
            this.vehicleRating = _data["vehicleRating"];
        }
    }

    static fromJS(data: any): RegionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RegionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionPosition"] = this.regionPosition;
        data["value"] = this.value;
        data["vehicleRating"] = this.vehicleRating;
        return data;
    }
}

export interface IRegionResponse {
    regionPosition: RegionPositionEnum;
    value: number;
    vehicleRating: string;
}

export enum RegionPositionEnum {
    Global = 0,
    Minimum = 1,
    InnerRegion = 2,
    MiddleRegion = 3,
    OuterRegion = 4,
}

export class PropertySetResponse implements IPropertySetResponse {
    deepGrove!: boolean;
    wearPatternResponse!: WearPatternResponse;
    shoulderWearResponse!: ShoulderWearResponse;

    constructor(data?: IPropertySetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.wearPatternResponse = new WearPatternResponse();
            this.shoulderWearResponse = new ShoulderWearResponse();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deepGrove = _data["deepGrove"];
            this.wearPatternResponse = _data["wearPatternResponse"] ? WearPatternResponse.fromJS(_data["wearPatternResponse"]) : new WearPatternResponse();
            this.shoulderWearResponse = _data["shoulderWearResponse"] ? ShoulderWearResponse.fromJS(_data["shoulderWearResponse"]) : new ShoulderWearResponse();
        }
    }

    static fromJS(data: any): PropertySetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PropertySetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deepGrove"] = this.deepGrove;
        data["wearPatternResponse"] = this.wearPatternResponse ? this.wearPatternResponse.toJSON() : <any>undefined;
        data["shoulderWearResponse"] = this.shoulderWearResponse ? this.shoulderWearResponse.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPropertySetResponse {
    deepGrove: boolean;
    wearPatternResponse: WearPatternResponse;
    shoulderWearResponse: ShoulderWearResponse;
}

export class WearPatternResponse implements IWearPatternResponse {
    info!: string;
    value!: number;

    constructor(data?: IWearPatternResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.info = _data["info"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): WearPatternResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WearPatternResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["info"] = this.info;
        data["value"] = this.value;
        return data;
    }
}

export interface IWearPatternResponse {
    info: string;
    value: number;
}

export class ShoulderWearResponse implements IShoulderWearResponse {
    info!: string;
    value!: number;

    constructor(data?: IShoulderWearResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.info = _data["info"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ShoulderWearResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ShoulderWearResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["info"] = this.info;
        data["value"] = this.value;
        return data;
    }
}

export interface IShoulderWearResponse {
    info: string;
    value: number;
}

export class CrossingRequest implements ICrossingRequest {
    name!: string;
    dateTime!: Date;
    results!: Result;

    constructor(data?: ICrossingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = new Result();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.results = _data["results"] ? Result.fromJS(_data["results"]) : new Result();
        }
    }

    static fromJS(data: any): CrossingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CrossingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["results"] = this.results ? this.results.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICrossingRequest {
    name: string;
    dateTime: Date;
    results: Result;
}

export class Result implements IResult {
    valid!: boolean;
    vehicleRating!: string;
    reportLink!: string;
    crossingDirection!: string;
    licensePlate!: LicensePlateRequest;
    frontLeft!: TireRequest;
    frontRight!: TireRequest;
    rearLeft!: TireRequest;
    rearRight!: TireRequest;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.licensePlate = new LicensePlateRequest();
            this.frontLeft = new TireRequest();
            this.frontRight = new TireRequest();
            this.rearLeft = new TireRequest();
            this.rearRight = new TireRequest();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.valid = _data["valid"];
            this.vehicleRating = _data["vehicleRating"];
            this.reportLink = _data["reportLink"];
            this.crossingDirection = _data["crossingDirection"];
            this.licensePlate = _data["licensePlate"] ? LicensePlateRequest.fromJS(_data["licensePlate"]) : new LicensePlateRequest();
            this.frontLeft = _data["frontLeft"] ? TireRequest.fromJS(_data["frontLeft"]) : new TireRequest();
            this.frontRight = _data["frontRight"] ? TireRequest.fromJS(_data["frontRight"]) : new TireRequest();
            this.rearLeft = _data["rearLeft"] ? TireRequest.fromJS(_data["rearLeft"]) : new TireRequest();
            this.rearRight = _data["rearRight"] ? TireRequest.fromJS(_data["rearRight"]) : new TireRequest();
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["valid"] = this.valid;
        data["vehicleRating"] = this.vehicleRating;
        data["reportLink"] = this.reportLink;
        data["crossingDirection"] = this.crossingDirection;
        data["licensePlate"] = this.licensePlate ? this.licensePlate.toJSON() : <any>undefined;
        data["frontLeft"] = this.frontLeft ? this.frontLeft.toJSON() : <any>undefined;
        data["frontRight"] = this.frontRight ? this.frontRight.toJSON() : <any>undefined;
        data["rearLeft"] = this.rearLeft ? this.rearLeft.toJSON() : <any>undefined;
        data["rearRight"] = this.rearRight ? this.rearRight.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResult {
    valid: boolean;
    vehicleRating: string;
    reportLink: string;
    crossingDirection: string;
    licensePlate: LicensePlateRequest;
    frontLeft: TireRequest;
    frontRight: TireRequest;
    rearLeft: TireRequest;
    rearRight: TireRequest;
}

export class LicensePlateRequest implements ILicensePlateRequest {
    plate!: string;
    plateConfidence!: number;
    country?: string | undefined;
    countryConfidence!: number;

    constructor(data?: ILicensePlateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.plate = _data["plate"];
            this.plateConfidence = _data["plateConfidence"];
            this.country = _data["country"];
            this.countryConfidence = _data["countryConfidence"];
        }
    }

    static fromJS(data: any): LicensePlateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LicensePlateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["plate"] = this.plate;
        data["plateConfidence"] = this.plateConfidence;
        data["country"] = this.country;
        data["countryConfidence"] = this.countryConfidence;
        return data;
    }
}

export interface ILicensePlateRequest {
    plate: string;
    plateConfidence: number;
    country?: string | undefined;
    countryConfidence: number;
}

export class TireRequest implements ITireRequest {
    valid!: boolean;
    valueSet!: ValueSetRequest;
    propertySet!: PropertySetRequest;

    constructor(data?: ITireRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.valueSet = new ValueSetRequest();
            this.propertySet = new PropertySetRequest();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.valid = _data["valid"];
            this.valueSet = _data["valueSet"] ? ValueSetRequest.fromJS(_data["valueSet"]) : new ValueSetRequest();
            this.propertySet = _data["propertySet"] ? PropertySetRequest.fromJS(_data["propertySet"]) : new PropertySetRequest();
        }
    }

    static fromJS(data: any): TireRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TireRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["valid"] = this.valid;
        data["valueSet"] = this.valueSet ? this.valueSet.toJSON() : <any>undefined;
        data["propertySet"] = this.propertySet ? this.propertySet.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITireRequest {
    valid: boolean;
    valueSet: ValueSetRequest;
    propertySet: PropertySetRequest;
}

export class ValueSetRequest implements IValueSetRequest {
    global!: GlobalRequest;
    minimum!: MinimumRequest;
    innerRegion!: InnerRegionRequest;
    middleRegion!: MiddleRegionRequest;
    outerRegion!: OuterRegionRequest;

    constructor(data?: IValueSetRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.global = new GlobalRequest();
            this.minimum = new MinimumRequest();
            this.innerRegion = new InnerRegionRequest();
            this.middleRegion = new MiddleRegionRequest();
            this.outerRegion = new OuterRegionRequest();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.global = _data["global"] ? GlobalRequest.fromJS(_data["global"]) : new GlobalRequest();
            this.minimum = _data["minimum"] ? MinimumRequest.fromJS(_data["minimum"]) : new MinimumRequest();
            this.innerRegion = _data["innerRegion"] ? InnerRegionRequest.fromJS(_data["innerRegion"]) : new InnerRegionRequest();
            this.middleRegion = _data["middleRegion"] ? MiddleRegionRequest.fromJS(_data["middleRegion"]) : new MiddleRegionRequest();
            this.outerRegion = _data["outerRegion"] ? OuterRegionRequest.fromJS(_data["outerRegion"]) : new OuterRegionRequest();
        }
    }

    static fromJS(data: any): ValueSetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValueSetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["global"] = this.global ? this.global.toJSON() : <any>undefined;
        data["minimum"] = this.minimum ? this.minimum.toJSON() : <any>undefined;
        data["innerRegion"] = this.innerRegion ? this.innerRegion.toJSON() : <any>undefined;
        data["middleRegion"] = this.middleRegion ? this.middleRegion.toJSON() : <any>undefined;
        data["outerRegion"] = this.outerRegion ? this.outerRegion.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValueSetRequest {
    global: GlobalRequest;
    minimum: MinimumRequest;
    innerRegion: InnerRegionRequest;
    middleRegion: MiddleRegionRequest;
    outerRegion: OuterRegionRequest;
}

export class GlobalRequest implements IGlobalRequest {
    value?: number | undefined;
    rating!: string;

    constructor(data?: IGlobalRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): GlobalRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GlobalRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IGlobalRequest {
    value?: number | undefined;
    rating: string;
}

export class MinimumRequest implements IMinimumRequest {
    value?: number | undefined;
    rating!: string;

    constructor(data?: IMinimumRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): MinimumRequest {
        data = typeof data === 'object' ? data : {};
        let result = new MinimumRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IMinimumRequest {
    value?: number | undefined;
    rating: string;
}

export class InnerRegionRequest implements IInnerRegionRequest {
    value?: number | undefined;
    rating!: string;

    constructor(data?: IInnerRegionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): InnerRegionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new InnerRegionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IInnerRegionRequest {
    value?: number | undefined;
    rating: string;
}

export class MiddleRegionRequest implements IMiddleRegionRequest {
    value?: number | undefined;
    rating!: string;

    constructor(data?: IMiddleRegionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): MiddleRegionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new MiddleRegionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IMiddleRegionRequest {
    value?: number | undefined;
    rating: string;
}

export class OuterRegionRequest implements IOuterRegionRequest {
    value?: number | undefined;
    rating!: string;

    constructor(data?: IOuterRegionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): OuterRegionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OuterRegionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IOuterRegionRequest {
    value?: number | undefined;
    rating: string;
}

export class PropertySetRequest implements IPropertySetRequest {
    deepGrove!: boolean;
    wearPattern!: WearPatternRequest;
    shoulderWear!: ShoulderWearRequest;

    constructor(data?: IPropertySetRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.wearPattern = new WearPatternRequest();
            this.shoulderWear = new ShoulderWearRequest();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deepGrove = _data["deepGrove"];
            this.wearPattern = _data["wearPattern"] ? WearPatternRequest.fromJS(_data["wearPattern"]) : new WearPatternRequest();
            this.shoulderWear = _data["shoulderWear"] ? ShoulderWearRequest.fromJS(_data["shoulderWear"]) : new ShoulderWearRequest();
        }
    }

    static fromJS(data: any): PropertySetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PropertySetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deepGrove"] = this.deepGrove;
        data["wearPattern"] = this.wearPattern ? this.wearPattern.toJSON() : <any>undefined;
        data["shoulderWear"] = this.shoulderWear ? this.shoulderWear.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPropertySetRequest {
    deepGrove: boolean;
    wearPattern: WearPatternRequest;
    shoulderWear: ShoulderWearRequest;
}

export class WearPatternRequest implements IWearPatternRequest {
    info!: string;
    value!: number;

    constructor(data?: IWearPatternRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.info = _data["info"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): WearPatternRequest {
        data = typeof data === 'object' ? data : {};
        let result = new WearPatternRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["info"] = this.info;
        data["value"] = this.value;
        return data;
    }
}

export interface IWearPatternRequest {
    info: string;
    value: number;
}

export class ShoulderWearRequest implements IShoulderWearRequest {
    info!: string;
    value!: number;

    constructor(data?: IShoulderWearRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.info = _data["info"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ShoulderWearRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ShoulderWearRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["info"] = this.info;
        data["value"] = this.value;
        return data;
    }
}

export interface IShoulderWearRequest {
    info: string;
    value: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}